import os.path

import torch
import numpy as np
import pandas as pd
import pytest
from torch.autograd import gradcheck
from combine1d.core.special_gradient_functions import para_width_from_thick, \
    para_thick_from_section, SolveBandedPyTorch
from combine1d.core.torch_interp1d import Interp1d

pytestmark = [pytest.mark.filterwarnings("ignore:<class 'combine1d.core.torch_interp1d.Interp1d'> "
                                         "should not be instantiated.:DeprecationWarning"),
              pytest.mark.test_env("special_gradient_functions")]


def test_parabolic_functions():
    test_shape = torch.abs(torch.randn(1000, dtype=torch.double, requires_grad=True))
    test_thick = torch.abs(torch.randn(1000, dtype=torch.double, requires_grad=True)) * 1000

    input_shape_thick = (test_shape, test_thick)
    assert gradcheck(para_width_from_thick.apply, input_shape_thick)

    test_section = torch.abs(torch.randn(1000, dtype=torch.double, requires_grad=True)) * 100

    input_shape_section = (test_shape, test_section)
    assert gradcheck(para_thick_from_section.apply, input_shape_section)


def test_Interp1d_gradient_calculation():
    x = torch.arange(0, 10, step=1, dtype=torch.double, requires_grad=True)
    y = torch.arange(0, 10, step=1, dtype=torch.double, requires_grad=True).pow(2)

    x_new = torch.arange(0.5, 9.5, step=1, dtype=torch.double, requires_grad=True)

    input_parameters = (x, y, x_new)
    assert gradcheck(Interp1d(), input_parameters)

    # check if it also works at the given points
    input_parameters = (x, y, x)
    assert gradcheck(Interp1d(), input_parameters)


def test_SolveBandedPyTorch(data_dir):
    # just creating some dummy data for testing
    Amat_banded = torch.tensor([[0., .2, .2, .2],
                                [1., 1., 1., 1.],
                                [.1, .1, .1, 0.],
                                ],
                               dtype=torch.double,
                               requires_grad=True)
    rhs = torch.tensor([1., 2., 3., 4.],
                       dtype=torch.double,
                       requires_grad=True)
    assert gradcheck(SolveBandedPyTorch.apply, (Amat_banded, rhs))

    # with more realistic data
    mat_banded = np.array([[
        0.00000000e+00, -3.91839043e-04, -5.43644166e-04,
        -8.77188020e-04, -5.98164529e-04, -7.27787294e-04,
        -8.54630711e-04, -6.57219650e-04, -1.12042381e-03,
        -1.04831227e-03, -1.47100877e-03, -1.85928612e-03,
        -2.57894600e-03, -3.93133516e-03, -5.49822045e-03,
        -7.92743787e-03, -1.15050718e-02, -1.84377212e-02,
        -2.16051356e-02, -2.99805841e-02, -4.55893669e-02,
        -4.77478306e-02, -6.59638311e-02, -7.00601626e-02,
        -7.01323267e-02, -7.55931538e-02, -9.37791579e-02,
        -1.22062523e-01, -1.43859144e-01, -1.80587199e-01,
        -2.33469416e-01, -2.32624156e-01, -2.09004501e-01,
        -1.85707399e-01, -1.69019616e-01, -1.85631939e-01,
        -2.15935503e-01, -2.21263576e-01, -2.17484040e-01,
        -1.99943542e-01, -1.74939196e-01, -1.49828403e-01,
        -1.35840875e-01, -1.32144507e-01, -1.58221627e-01,
        -1.83055474e-01, -2.04023903e-01, -2.13515503e-01,
        -2.18544933e-01, -2.05326879e-01, -1.97655218e-01,
        -1.91540040e-01, -1.93946435e-01, -2.16339045e-01,
        -2.42114382e-01, -2.54326345e-01, -2.48149617e-01,
        -2.34381309e-01, -2.36469016e-01, -2.41022751e-01,
        -2.41443442e-01, -2.47259948e-01, -2.54019030e-01,
        -2.51922296e-01, -2.49528978e-01, -2.32711806e-01,
        -2.11474085e-01, -2.10962426e-01, -2.31978085e-01,
        -2.33885197e-01, -2.06960316e-01, -1.91377556e-01,
        -1.96412763e-01, -1.94237468e-01, -2.15720046e-01,
        -2.67578150e-01, -3.01025087e-01, -3.10116053e-01,
        -3.08807809e-01, -2.77161787e-01, -2.38155656e-01,
        -2.09157609e-01, -1.87271807e-01, -1.79748325e-01,
        -1.87615129e-01, -1.84644945e-01, -1.67355056e-01,
        -1.59092639e-01, -1.61091052e-01, -1.57761782e-01,
        -1.39549745e-01, -1.22971734e-01, -1.18244098e-01,
        -1.14844093e-01, -1.05070035e-01, -9.49894837e-02,
        -9.35053254e-02, -9.15881221e-02, -8.28501019e-02,
        -6.62316109e-02, -4.19947166e-02, -2.67503026e-02,
        -2.19217333e-02, -1.66197530e-02, -1.32401355e-02,
        -8.00999009e-03, -2.59477585e-03, -1.62950378e-03,
        -3.86766816e-05, -0.00000000e+00, -0.00000000e+00,
        -0.00000000e+00, -0.00000000e+00, -0.00000000e+00,
        -0.00000000e+00, -0.00000000e+00, -0.00000000e+00,
        -0.00000000e+00, -0.00000000e+00, -0.00000000e+00,
        -0.00000000e+00, -0.00000000e+00, -0.00000000e+00,
        -0.00000000e+00, -0.00000000e+00, -0.00000000e+00,
        -0.00000000e+00, -0.00000000e+00, -0.00000000e+00,
        -0.00000000e+00, -0.00000000e+00, -0.00000000e+00,
        -0.00000000e+00, -0.00000000e+00, -0.00000000e+00,
        -0.00000000e+00, -0.00000000e+00, -0.00000000e+00,
        -0.00000000e+00, -0.00000000e+00, -0.00000000e+00,
        -0.00000000e+00, -0.00000000e+00, -0.00000000e+00,
        -0.00000000e+00, -0.00000000e+00, -0.00000000e+00,
        -0.00000000e+00, -0.00000000e+00, -0.00000000e+00,
        -0.00000000e+00, -0.00000000e+00, -0.00000000e+00,
        -0.00000000e+00, -0.00000000e+00, -0.00000000e+00,
        -0.00000000e+00, -0.00000000e+00, -0.00000000e+00,
        -0.00000000e+00, -0.00000000e+00, -0.00000000e+00,
        -0.00000000e+00, -0.00000000e+00, -0.00000000e+00,
        -0.00000000e+00, -0.00000000e+00, -0.00000000e+00,
        -0.00000000e+00, -0.00000000e+00, -0.00000000e+00,
        -0.00000000e+00, -0.00000000e+00, -0.00000000e+00,
        -0.00000000e+00, -0.00000000e+00, -0.00000000e+00,
        -0.00000000e+00, -0.00000000e+00],
        [1.00039184e+00, 1.00088321e+00, 1.00098968e+00,
         1.00101336e+00, 1.00099218e+00, 1.00133906e+00,
         1.00119215e+00, 1.00164245e+00, 1.00200583e+00,
         1.00242895e+00, 1.00314935e+00, 1.00494017e+00,
         1.00666809e+00, 1.01037828e+00, 1.01425505e+00,
         1.02316800e+00, 1.03248165e+00, 1.03968393e+00,
         1.05976411e+00, 1.08233826e+00, 1.09222261e+00,
         1.12906614e+00, 1.13806051e+00, 1.13908896e+00,
         1.14687006e+00, 1.17829920e+00, 1.22869178e+00,
         1.27026010e+00, 1.34557250e+00, 1.45590234e+00,
         1.46608852e+00, 1.42923000e+00, 1.38046002e+00,
         1.34146869e+00, 1.36996795e+00, 1.42785761e+00,
         1.44299892e+00, 1.44130711e+00, 1.41846869e+00,
         1.37532576e+00, 1.32287247e+00, 1.28121686e+00,
         1.25929116e+00, 1.30211301e+00, 1.35350074e+00,
         1.39930138e+00, 1.43545041e+00, 1.45470404e+00,
         1.42695106e+00, 1.39877128e+00, 1.38079543e+00,
         1.38126742e+00, 1.41692647e+00, 1.46917982e+00,
         1.51559384e+00, 1.52108277e+00, 1.47374631e+00,
         1.46284089e+00, 1.47389817e+00, 1.47950987e+00,
         1.49070719e+00, 1.51000181e+00, 1.51520807e+00,
         1.50620045e+00, 1.48264958e+00, 1.44458877e+00,
         1.44398491e+00, 1.47629584e+00, 1.48046401e+00,
         1.42067348e+00, 1.38420840e+00, 1.40465402e+00,
         1.40965212e+00, 1.44456715e+00, 1.53504966e+00,
         1.59928720e+00, 1.61199480e+00, 1.61266851e+00,
         1.56570309e+00, 1.49825569e+00, 1.43909080e+00,
         1.39002535e+00, 1.37398307e+00, 1.38347158e+00,
         1.37524650e+00, 1.34035977e+00, 1.32399667e+00,
         1.33085414e+00, 1.32614962e+00, 1.29160448e+00,
         1.25908902e+00, 1.24684794e+00, 1.23858180e+00,
         1.22166345e+00, 1.20186099e+00, 1.19640539e+00,
         1.19115193e+00, 1.17441027e+00, 1.14391762e+00,
         1.09670955e+00, 1.06643866e+00, 1.05348380e+00,
         1.04561782e+00, 1.03052915e+00, 1.02369002e+00,
         1.00862343e+00, 1.00571841e+00, 1.00236097e+00,
         1.00002688e+00, 1.00000000e+00, 1.00000000e+00,
         1.00000000e+00, 1.00000000e+00, 1.00000000e+00,
         1.00000000e+00, 1.00000000e+00, 1.00000000e+00,
         1.00000000e+00, 1.00000000e+00, 1.00000000e+00,
         1.00000000e+00, 1.00000000e+00, 1.00000000e+00,
         1.00000000e+00, 1.00000000e+00, 1.00000000e+00,
         1.00000000e+00, 1.00000000e+00, 1.00000000e+00,
         1.00000000e+00, 1.00000000e+00, 1.00000000e+00,
         1.00000000e+00, 1.00000000e+00, 1.00000000e+00,
         1.00000000e+00, 1.00000000e+00, 1.00000000e+00,
         1.00000000e+00, 1.00000000e+00, 1.00000000e+00,
         1.00000000e+00, 1.00000000e+00, 1.00000000e+00,
         1.00000000e+00, 1.00000000e+00, 1.00000000e+00,
         1.00000000e+00, 1.00000000e+00, 1.00000000e+00,
         1.00000000e+00, 1.00000000e+00, 1.00000000e+00,
         1.00000000e+00, 1.00000000e+00, 1.00000000e+00,
         1.00000000e+00, 1.00000000e+00, 1.00000000e+00,
         1.00000000e+00, 1.00000000e+00, 1.00000000e+00,
         1.00000000e+00, 1.00000000e+00, 1.00000000e+00,
         1.00000000e+00, 1.00000000e+00, 1.00000000e+00,
         1.00000000e+00, 1.00000000e+00, 1.00000000e+00,
         1.00000000e+00, 1.00000000e+00, 1.00000000e+00,
         1.00000000e+00, 1.00000000e+00, 1.00000000e+00,
         1.00000000e+00, 1.00000000e+00],
        [-3.39562185e-04, -1.12494083e-04, -4.15192999e-04,
         -2.64393816e-04, -4.84430154e-04, -5.34933248e-04,
         -5.22024996e-04, -9.57514761e-04, -9.57939579e-04,
         -1.29006338e-03, -2.36122482e-03, -2.73674991e-03,
         -4.88005611e-03, -6.32761651e-03, -1.16629280e-02,
         -1.40439302e-02, -1.80787977e-02, -2.97835213e-02,
         -3.67488921e-02, -4.44747816e-02, -6.31023117e-02,
         -6.80003463e-02, -6.89566353e-02, -7.12769063e-02,
         -8.45200403e-02, -1.06629256e-01, -1.26400956e-01,
         -1.64985300e-01, -2.22432928e-01, -2.33464367e-01,
         -2.20225495e-01, -1.94752625e-01, -1.72449070e-01,
         -1.84336016e-01, -2.11922104e-01, -2.21735345e-01,
         -2.23823069e-01, -2.18525143e-01, -2.00386561e-01,
         -1.73044069e-01, -1.45375990e-01, -1.27146657e-01,
         -1.43891383e-01, -1.70445264e-01, -1.95277474e-01,
         -2.21934905e-01, -2.36159105e-01, -2.21624183e-01,
         -2.01116066e-01, -1.89255393e-01, -1.87320984e-01,
         -2.00587424e-01, -2.27065437e-01, -2.61267497e-01,
         -2.72933153e-01, -2.39364996e-01, -2.26371870e-01,
         -2.32875420e-01, -2.38066428e-01, -2.43447239e-01,
         -2.55982784e-01, -2.63285775e-01, -2.56671473e-01,
         -2.49937778e-01, -2.33114684e-01, -2.33022480e-01,
         -2.44317758e-01, -2.46578812e-01, -2.13713162e-01,
         -1.92830841e-01, -2.08241260e-01, -2.15414654e-01,
         -2.28847106e-01, -2.67471509e-01, -2.98262118e-01,
         -3.01878750e-01, -3.03860701e-01, -2.88541304e-01,
         -2.60100030e-01, -2.29933193e-01, -2.02753539e-01,
         -1.94234749e-01, -1.95856449e-01, -1.90601550e-01,
         -1.73004716e-01, -1.64904030e-01, -1.69763089e-01,
         -1.68387841e-01, -1.52054733e-01, -1.36117286e-01,
         -1.28603847e-01, -1.23737705e-01, -1.16593413e-01,
         -1.06871507e-01, -1.02900064e-01, -9.95638062e-02,
         -9.15601632e-02, -7.76860055e-02, -5.47148321e-02,
         -3.96883572e-02, -3.15620676e-02, -2.89980656e-02,
         -1.72890105e-02, -1.56800329e-02, -6.02865288e-03,
         -4.08890939e-03, -2.32229523e-03, -2.68792950e-05,
         -0.00000000e+00, -0.00000000e+00, -0.00000000e+00,
         -0.00000000e+00, -0.00000000e+00, -0.00000000e+00,
         -0.00000000e+00, -0.00000000e+00, -0.00000000e+00,
         -0.00000000e+00, -0.00000000e+00, -0.00000000e+00,
         -0.00000000e+00, -0.00000000e+00, -0.00000000e+00,
         -0.00000000e+00, -0.00000000e+00, -0.00000000e+00,
         -0.00000000e+00, -0.00000000e+00, -0.00000000e+00,
         -0.00000000e+00, -0.00000000e+00, -0.00000000e+00,
         -0.00000000e+00, -0.00000000e+00, -0.00000000e+00,
         -0.00000000e+00, -0.00000000e+00, -0.00000000e+00,
         -0.00000000e+00, -0.00000000e+00, -0.00000000e+00,
         -0.00000000e+00, -0.00000000e+00, -0.00000000e+00,
         -0.00000000e+00, -0.00000000e+00, -0.00000000e+00,
         -0.00000000e+00, -0.00000000e+00, -0.00000000e+00,
         -0.00000000e+00, -0.00000000e+00, -0.00000000e+00,
         -0.00000000e+00, -0.00000000e+00, -0.00000000e+00,
         -0.00000000e+00, -0.00000000e+00, -0.00000000e+00,
         -0.00000000e+00, -0.00000000e+00, -0.00000000e+00,
         -0.00000000e+00, -0.00000000e+00, -0.00000000e+00,
         -0.00000000e+00, -0.00000000e+00, -0.00000000e+00,
         -0.00000000e+00, -0.00000000e+00, -0.00000000e+00,
         -0.00000000e+00, -0.00000000e+00, -0.00000000e+00,
         -0.00000000e+00, -0.00000000e+00, -0.00000000e+00,
         -0.00000000e+00, 0.00000000e+00]])

    rhs = np.array([
        2.5786e+01, 3.6836e+01, 4.0984e+01, 4.1544e+01, 4.2530e+01,
        4.2771e+01, 4.6493e+01, 4.6219e+01, 4.7498e+01, 5.3223e+01,
        5.9432e+01, 7.5006e+01, 8.5055e+01, 9.3040e+01, 1.0425e+02,
        1.3008e+02, 1.4564e+02, 1.5149e+02, 1.9033e+02, 2.1586e+02,
        2.2005e+02, 2.5638e+02, 2.6456e+02, 2.5948e+02, 2.6131e+02,
        2.8374e+02, 3.2162e+02, 3.5843e+02, 4.0103e+02, 4.4370e+02,
        4.5545e+02, 4.3389e+02, 4.0645e+02, 3.9454e+02, 4.0188e+02,
        4.2785e+02, 4.4432e+02, 4.3942e+02, 4.3888e+02, 4.0092e+02,
        3.5910e+02, 3.2693e+02, 3.2054e+02, 3.5874e+02, 3.9823e+02,
        4.2571e+02, 4.4413e+02, 4.3184e+02, 4.0092e+02, 3.9326e+02,
        3.9064e+02, 4.0131e+02, 4.2326e+02, 4.6371e+02, 5.0191e+02,
        4.6914e+02, 4.3348e+02, 4.5442e+02, 4.7812e+02, 4.8126e+02,
        5.0505e+02, 5.1972e+02, 5.2261e+02, 5.2094e+02, 5.2089e+02,
        4.9379e+02, 4.6301e+02, 4.7249e+02, 4.6993e+02, 4.4778e+02,
        4.4817e+02, 4.7205e+02, 4.4939e+02, 4.3466e+02, 4.6563e+02,
        4.9439e+02, 4.9874e+02, 5.2126e+02, 5.3098e+02, 4.8842e+02,
        4.6224e+02, 4.4423e+02, 4.2701e+02, 4.3160e+02, 4.3481e+02,
        4.2596e+02, 4.2774e+02, 4.3597e+02, 4.3388e+02, 4.2114e+02,
        3.9929e+02, 3.8922e+02, 3.9199e+02, 3.9039e+02, 3.6885e+02,
        3.5896e+02, 3.6472e+02, 3.6157e+02, 3.5055e+02, 3.1575e+02,
        2.7836e+02, 2.4136e+02, 2.1613e+02, 1.7248e+02, 1.5705e+02,
        1.3086e+02, 1.1379e+02, 9.3552e+01, -1.8218e-01, -1.8209e-01,
        -1.8324e-01, -1.8401e-01, -1.8466e-01, -1.8525e-01, -1.8574e-01,
        -1.8614e-01, -1.8648e-01, -1.8664e-01, -1.8630e-01, -1.8577e-01,
        -1.8624e-01, -1.8830e-01, -1.9056e-01, -1.9164e-01, -1.9231e-01,
        -1.9399e-01, -1.9633e-01, -1.9832e-01, -1.9963e-01, -2.0049e-01,
        -2.0137e-01, -2.0213e-01, -2.0282e-01, -2.0370e-01, -2.0459e-01,
        -2.0547e-01, -2.0626e-01, -2.0669e-01, -2.0670e-01, -2.0651e-01,
        -2.0685e-01, -2.0764e-01, -2.0867e-01, -2.0983e-01, -2.1087e-01,
        -2.1184e-01, -2.1293e-01, -2.1395e-01, -2.1443e-01, -2.1411e-01,
        -2.1345e-01, -2.1359e-01, -2.1503e-01, -2.1692e-01, -2.1830e-01,
        -2.1910e-01, -2.1994e-01, -2.2090e-01, -2.2178e-01, -2.2252e-01,
        -2.2307e-01, -2.2339e-01, -2.2344e-01, -2.2350e-01, -2.2405e-01,
        -2.2483e-01, -2.2495e-01, -2.2453e-01, -2.2500e-01, -2.2663e-01,
        -2.2808e-01, -2.2884e-01, -2.2936e-01, -2.3004e-01, -2.3075e-01,
        -2.3134e-01, -2.3200e-01, -2.3280e-01, -2.3332e-01],
    )

    mat_banded = torch.tensor(mat_banded,
                              dtype=torch.double,
                              requires_grad=True)
    rhs = torch.tensor(rhs,
                       dtype=torch.double,
                       requires_grad=True)

    assert gradcheck(SolveBandedPyTorch.apply, (mat_banded, rhs))
